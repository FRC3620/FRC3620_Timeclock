
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.text.DefaultFormatter;
import org.frc3620.timeclock.Utils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author wegscd
 */
public class TestSpinners extends javax.swing.JDialog {

    /**
     * Creates new form TestSpinners
     */
    SpinnerDateModel startTimeModel, endTimeModel;
    boolean settingUp = true, okHit = true;
    Logger logger = LoggerFactory.getLogger(getClass());

    public TestSpinners(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();

        startTimeModel = (SpinnerDateModel) startSpinner.getModel();
        endTimeModel = (SpinnerDateModel) endSpinner.getModel();

        fixupDateEditor(startSpinner);
        fixupDateEditor(endSpinner);
        resetSpinnerMaxMin();

    }

    public boolean showDialog(Date s, Date e) {
        settingUp = true;
        // resetSpinnerMaxMin();
        setStartTime(s);
        //setPreviousStartTime(s);
        setEndTime((null != e) ? e : s);
        // setPreviousEndTime(e);
        // endDateIsNullCheckbox.setSelected(null == e);
        // updateEndSpinnerEnabled();
        settingUp = false;
        
        resetStartSpinnerLimit("resetStart@setup");
        resetEndSpinnerLimit("resetEnd@setup");

        okHit = false;
        setVisible(true);
        return okHit;
    }

    void resetStartSpinnerLimit(String s) {
        if (!settingUp) {
            logger.info("touched startTimeModel.setEnd");
            startTimeModel.setEnd((Date) endSpinner.getValue());
            logSpinners(s);
        }
    }

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS z");

    void resetEndSpinnerLimit(String s) {
        if (!settingUp) {
            logger.info("touched endTimeModel.setStart");
            endTimeModel.setStart((Date) startSpinner.getValue());
            logSpinners(s);
        }
    }
    
    String diagDate (Object o) {
        if (null == o) {
            return "(null)";
        } else {
            if (o instanceof Date) {
                return sdf.format(o);
            } else {
                return o.toString();
            }
        }
    }

    void logSpinners(String s) {
        logger.info("logging spinners: {}", s);
        logger.info("start spinner {} {} {} {}", diagDate(startTimeModel.getStart()), diagDate(startTimeModel.getDate()), diagDate(startSpinner.getValue()), diagDate(startTimeModel.getEnd()));
        logger.info("  end spinner {} {} {} {}", diagDate(endTimeModel.getStart()), diagDate(endTimeModel.getDate()), diagDate(endSpinner.getValue()), diagDate(endTimeModel.getEnd()));
    }

    void fixupDateEditor(JSpinner e) {
        JComponent rv = e.getEditor();
        JFormattedTextField field = (JFormattedTextField) rv.getComponent(0);
        DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
        formatter.setCommitsOnValidEdit(true);
        //formatter.setAllowsInvalid(false);
    }

    void resetSpinnerMaxMin() {
        Calendar cal1 = GregorianCalendar.getInstance();
        cal1.clear();
        cal1.set(1970, Calendar.JANUARY, 1, 0, 0, 0);
        Date min = cal1.getTime();

        Calendar cal2 = GregorianCalendar.getInstance();
        cal2.clear();
        cal2.set(1970, Calendar.JANUARY, 1, 23, 59, 59);
        cal2.set(Calendar.MILLISECOND, 999);
        Date max = cal2.getTime();

        startTimeModel.setStart(min);
        endTimeModel.setStart(min);
        startTimeModel.setEnd(max);
        endTimeModel.setEnd(max);

    }

    void setStartTime(Date d) {
        Date d0 = Utils.getTimeOfDay(d);
        startTimeModel.setValue(d0);
        logger.info("set start time {} -> {}", d, d0);
        logSpinners("setStartTime");
    }

    void setEndTime(Date d) {
        Date d0 = Utils.getTimeOfDay(d);
        endTimeModel.setValue(d0);
        logger.info("set end time {} -> {}", d, d0);
        logSpinners("setEndTime");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startSpinner = new javax.swing.JSpinner();
        endSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        startSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        startSpinner.setEditor(new javax.swing.JSpinner.DateEditor(startSpinner, "h:mm:ss a"));
        startSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startSpinnerStateChanged(evt);
            }
        });

        endSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        endSpinner.setEditor(new javax.swing.JSpinner.DateEditor(endSpinner, "h:mm:ss a"));
        endSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(endSpinner))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startSpinnerStateChanged
        logger.info("start spinner change event: {}", startSpinner.getValue());
        resetEndSpinnerLimit("startChanged");

    }//GEN-LAST:event_startSpinnerStateChanged

    private void endSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endSpinnerStateChanged
        logger.info("end spinner change event: {}", endSpinner.getValue());
        resetStartSpinnerLimit("endChanged");
    }//GEN-LAST:event_endSpinnerStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestSpinners.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestSpinners.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestSpinners.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestSpinners.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TestSpinners dialog = new TestSpinners(new javax.swing.JFrame(), true);
                Calendar c = new GregorianCalendar();
                c.set(Calendar.MILLISECOND, 0);
                Date s = c.getTime();
                c.add(Calendar.HOUR, 1);
                Date e = c.getTime();
                dialog.showDialog(s, e);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner endSpinner;
    private javax.swing.JSpinner startSpinner;
    // End of variables declaration//GEN-END:variables
}
